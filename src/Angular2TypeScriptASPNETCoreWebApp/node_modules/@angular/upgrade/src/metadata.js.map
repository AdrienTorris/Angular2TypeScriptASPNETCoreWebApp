{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../../../../modules/@angular/upgrade/src/metadata.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,iBAAiB,EAAC,MAAM,mBAAmB;AAGnD,IAAM,kBAAkB,GAAG,WAAW,CAAC;AACvC,IAAM,WAAW,GAAG,QAAQ,CAAC;AAC7B,IAAM,iBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAC;AAoBlD,iCAAiC,IAAe;IAC9C,IAAM,gBAAgB,GAAc,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACpE,IAAI,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC;IACzC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,IAAI,KAAK,CAAC,4DAA4D,GAAG,QAAQ,CAAC,CAAC;IAC3F,CAAC;IACD,QAAQ,GAAG,QAAQ,CAAC,OAAO,CACvB,WAAW,EAAE,UAAC,GAAQ,CAAC,iBAAiB,EAAE,MAAc,IAAK,OAAA,MAAM,CAAC,WAAW,EAAE,EAApB,CAAoB,CAAC,CAAC;IACvF,MAAM,CAAC;QACL,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,QAAQ;QAClB,MAAM,EAAE,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC;QAC5C,OAAO,EAAE,WAAW,CAAC,gBAAgB,CAAC,OAAO,CAAC;KAC/C,CAAC;AACJ,CAAC;AAED,4BAA4B,KAAe;IACzC,IAAM,SAAS,GAAe,EAAE,CAAC;IACjC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACV,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,IAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAClC,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAC7B,IAAM,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAC3C,IAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAClE,SAAS,CAAC,IAAI,CAAW;gBACvB,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,IAAI;gBACV,WAAW,EAAE,MAAI,IAAI,MAAG;gBACxB,SAAS,EAAE,MAAI,IAAI,MAAG;gBACtB,gBAAgB,EAAE,OAAK,IAAI,OAAI;gBAC/B,MAAM,EAAE,OAAK,WAAa;gBAC1B,QAAQ,EAAE,SAAO,WAAa;gBAC9B,UAAU,EAAE,WAAS,WAAa;aACnC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IACD,MAAM,CAAC,SAAS,CAAC;AACnB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DirectiveResolver} from '@angular/compiler';\nimport {Directive, Type} from '@angular/core';\n\nconst COMPONENT_SELECTOR = /^[\\w|-]*$/;\nconst SKEWER_CASE = /-(\\w)/g;\nconst directiveResolver = new DirectiveResolver();\n\nexport interface AttrProp {\n  prop: string;\n  attr: string;\n  bracketAttr: string;\n  bracketParenAttr: string;\n  parenAttr: string;\n  onAttr: string;\n  bindAttr: string;\n  bindonAttr: string;\n}\n\nexport interface ComponentInfo {\n  type: Type<any>;\n  selector: string;\n  inputs?: AttrProp[];\n  outputs?: AttrProp[];\n}\n\nexport function getComponentInfo(type: Type<any>): ComponentInfo {\n  const resolvedMetadata: Directive = directiveResolver.resolve(type);\n  let selector = resolvedMetadata.selector;\n  if (!selector.match(COMPONENT_SELECTOR)) {\n    throw new Error('Only selectors matching element names are supported, got: ' + selector);\n  }\n  selector = selector.replace(\n      SKEWER_CASE, (all: any /** TODO #9100 */, letter: string) => letter.toUpperCase());\n  return {\n    type: type,\n    selector: selector,\n    inputs: parseFields(resolvedMetadata.inputs),\n    outputs: parseFields(resolvedMetadata.outputs)\n  };\n}\n\nexport function parseFields(names: string[]): AttrProp[] {\n  const attrProps: AttrProp[] = [];\n  if (names) {\n    for (let i = 0; i < names.length; i++) {\n      const parts = names[i].split(':');\n      const prop = parts[0].trim();\n      const attr = (parts[1] || parts[0]).trim();\n      const capitalAttr = attr.charAt(0).toUpperCase() + attr.substr(1);\n      attrProps.push(<AttrProp>{\n        prop: prop,\n        attr: attr,\n        bracketAttr: `[${attr}]`,\n        parenAttr: `(${attr})`,\n        bracketParenAttr: `[(${attr})]`,\n        onAttr: `on${capitalAttr}`,\n        bindAttr: `bind${capitalAttr}`,\n        bindonAttr: `bindon${capitalAttr}`\n      });\n    }\n  }\n  return attrProps;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}